SOLID is a set of five design principles aimed at writing clean, maintainable, and scalable object-oriented code.
These principles help in building loosely-coupled, testable, and robust software systems, especially useful in LLD interviews.
-----------------------------------------------------------------------------------------------------------------------------

1. Single Responsibility Principle (SRP) - A struct/class should have only one reason to change.

1.1 Invoice only handles invoice-related logic (calculation).
struct Invoice {
    amount: f64,
}
impl Invoice {
    fn calculate_total(&self) -> f64 {
        self.amount * 1.18
    }
}

1.2 InvoicePrinter is responsible for displaying/printing the invoice.
struct InvoicePrinter;
impl InvoicePrinter {
    fn print(invoice: &Invoice) {
        println!("Total amount: {}", invoice.calculate_total());
    }
}

1.3 They follow SRP because any change in calculation (e.g., tax logic) won't affect printing logic and vice versa.

-----------------------------------------------------------------------------------------------------------------------------

2. Open/Closed Principle (OCP) - Software components should be open for extension but closed for modification — 
i.e., we can add new functionality without changing existing code.

2.1 A trait discount with fn apply
trait Discount {
    fn apply(&self, price: f64) -> f64;
}

2.2 discount type
struct NoDiscount;
impl Discount for NoDiscount {
    fn apply(&self, price: f64) -> f64 { price }
}

2.3 another discount type
struct FlatDiscount(f64);
impl Discount for FlatDiscount {
    fn apply(&self, price: f64) -> f64 {
        price - self.0
    }
}

2.4 This function doesn't care about the discount logic. It just accepts any Discount and applies it.
This follows OCP because we never have to touch checkout() again when adding new discount types.
fn checkout(price: f64, discount: &dyn Discount) -> f64 {
    discount.apply(price)
}

2.5 New discount types can be added (e.g., FlatDiscount, PercentageDiscount) without changing checkout().
This makes the system extensible but stable.
fn main() {
    let discount = FlatDiscount(20.0);
    let final_price = checkout(100.0, &discount); 
    println!("Final Price: {}", final_price);
}
 -----------------------------------------------------------------------------------------------------------------------------


3. Liskov Substitution Principle (LSP): Derived types must be substitutable for their base types without breaking behavior.

3.1 forcing Bird to fly
trait Bird {
    fn fly(&self);
}

3.2  allowed – Sparrow can fly
struct Sparrow;
impl Bird for Sparrow {
    fn fly(&self) {
        println!("Sparrow is flying");
    }
}

3.3 Not allowed – Penguins can't fly
struct Penguin;
// impl Bird for Penguin

-----------------------------------------------------------------------------------------------------------------------------

4. Interface Segregation Principle (ISP) — Clients should not be forced to depend on methods they do not use.

4.1 Bad: One large trait : Now even robots must implement eat() — which makes no sense.
trait Worker {
    fn work(&self);
    fn eat(&self);
}

4.2 Good: Break into smaller traits : Only implement what is required. Robot doesn't need to implement Eat.
trait Work {
    fn work(&self);
}
trait Eat {
    fn eat(&self);
}
struct Human;
impl Work for Human {
    fn work(&self) { println!("Human working"); }
}
impl Eat for Human {
    fn eat(&self) { println!("Human eating"); }
}
struct Robot;
impl Work for Robot {
    fn work(&self) { println!("Robot working"); }
}

-----------------------------------------------------------------------------------------------------------------------------

5. Dependency Inversion Principle (DIP) — High-level modules should not depend on low-level modules.
Both should depend on abstractions. 	High-level code uses traits, not concrete types.

5.1 High-Level Module 'ReportService' Depends on Low-Level Concrete Struct 'DB': 
If you want to switch to PostgreSQL, you must change ReportService's code — it’s not isolated.

struct MySQL;
impl MySQL {
    fn save(&self, data: &str) {
        println!("Saving '{}' to MySQL", data);
    }
}

struct ReportService<'a> {
    db: &'a MySQL, //wrong:Depends on concrete MySQL type
}
impl<'a> ReportService<'a> {
    fn generate(&self, data: &str) {
        self.db.save(data); //tightly coupled to MySQL
    }
}

5.2 Fix with Trait
trait DB {
    fn save(&self, data: &str);
}
struct MySQL;
impl DB for MySQL {
    fn save(&self, data: &str) {
        println!("Saving '{}' to MySQL", data);
    }
}
struct ReportService<'a> {
    db: &'a dyn DB, //correct: use of trait(abstraction) instead of struct(concrete)
}
impl<'a> ReportService<'a> {
    fn generate(&self, data: &str) {
        self.db.save(data); //
    }
}

