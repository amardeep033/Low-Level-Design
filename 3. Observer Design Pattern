0. Observer Design pattern: if observable state changes, update all observer (like pub/sub model)
-------------------------------------------------------------------------------------------------------------

1. Observable
1.1add observer
1.2 remove observer
1.3 notify observer (for each observer -> obs.update)
1.4 set data(business logic -> notify observer)
-------------------------------------------------------------------------------------------------------------

2. Observer 
2.1 update (Note: to understand what got changed, pass observable object OR better add in constructor itself)
-------------------------------------------------------------------------------------------------------------

3. Example
3.1 Weather Station: curr temp -----> TvDisplay, MobileDisplay
3.2 Stocks(Iphone) -> Alert(Email, Phone)
-------------------------------------------------------------------------------------------------------------

4 This is Observer Pattern, useful when: One-to-many dependencies exist: You want event-based communication (UI updates, alerts, etc.)
4.1 Loose Coupling: Observable doesn’t care what the observers do — it just notifies them.
4.2 Open/Closed Principle: New observers can be added without changing existing code.
4.3 Dependency Inversion Principle: Observable depends on Observer trait, not concrete types.
-------------------------------------------------------------------------------------------------------------

5.1 Observer

trait Observer {
    fn update(&self, data: &str); // you can pass a ref to observable or just the data
}

5.2 Observable

struct Observable {
    observers: Vec<Box<dyn Observer>>, //list of observer
    data: String, //data which upon change, will trigger notify
}
impl Observable {
    fn new() -> Self {
        Self { observers: vec![], data: String::new() }
    }
    fn add_observer(&mut self, obs: Box<dyn Observer>) {
        self.observers.push(obs);
    }
    fn remove_observer(&mut self, index: usize) {
        self.observers.remove(index); // simplistic
    }
    fn set_data(&mut self, new_data: &str) {
        self.data = new_data.to_string();
        self.notify_observers();
    }
    fn notify_observers(&self) {
        for obs in &self.observers {
            obs.update(&self.data);
        }
    }
}

